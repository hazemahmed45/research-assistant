"""
API Creation Module
=====================

Provides functions for creating the FastAPI application instance.

Functions
---------
"""

from pathlib import Path
from fastapi import FastAPI, APIRouter
from src.api.config import ApiSettings
from src.api.routers.healthcheck_route import healthcheck_router


def get_active_branch_name():
    """
    Retrieve the name of the currently active Git branch

    :return: Name of the active Git branch
    :rtype: str
    """
    head_dir = Path(".") / ".git" / "HEAD"
    with head_dir.open("r") as f:
        content = f.read().splitlines()

    for line in content:
        if line[0:4] == "ref:":
            return line.partition("refs/heads/")[2]


def create_api_desc() -> str:
    """
    Generate a brief description for the API

    :return: API description string
    :rtype: str
    """
    desc = f"""Deployed API for research assistant"""
    return desc


def create_app() -> FastAPI:
    """
    Initialize and configure the FastAPI application instance

    **Application Configuration**

    * **Title**: Voice Assistant API
    * **Summary**: Brief API description (generated by `create_api_desc`)
    * **Version**: Currently active Git branch name (retrieved by `get_active_branch_name`)
    * **Contact**: API maintainer information (name and email)
    * **Docs/Redoc URLs**: Custom URLs for API documentation and Redoc

    **Router Inclusion**

    * **Healthcheck Router**: Always included
    * **Complain Router**: Included if `deploy_complain` setting is True
    * **ASR Router**: Included if `deploy_asr` setting is True
    * **E2E Router**: Included if both `deploy_asr` and `deploy_complain` settings are True
    * **Wakeup Router**: Included if `deploy_wakeup` setting is True

    :return: Configured FastAPI application instance
    :rtype: FastAPI

    """
    settings = ApiSettings()
    api_desc = create_api_desc()
    app: FastAPI = FastAPI(
        title="Research Assistant API",
        summary=api_desc,
        # description=create_api_desc(),
        version=get_active_branch_name(),
        docs_url=f"/{settings.main_route}/docs",
        redoc_url=f"/{settings.main_route}/redoc",
    )
    api_router = APIRouter(prefix=f"/{settings.main_route}")
    api_router.include_router(healthcheck_router)
    if settings.deploy_complain:
        from src.api.routers.complain_routes import complain_router

        api_router.include_router(complain_router)
    if settings.deploy_asr:
        from src.api.routers.asr_routes import asr_router

        api_router.include_router(asr_router)
    if settings.deploy_asr and settings.deploy_complain:
        from src.api.routers.e2e_routes import e2e_router

        api_router.include_router(e2e_router)
    if settings.deploy_wakeup:
        from src.api.routers.wakeup_routes import wakeup_router

        api_router.include_router(wakeup_router)
    app.include_router(api_router)

    return app
